import sys


def recursive(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n % 2:
        return 1 - recursive(n // 2)
    else:
        return recursive(n // 2)


if __name__ == "__main__":
    k = int(sys.stdin.readline())
    print(recursive(k - 1))

# 풀이 참고
# 투에모스 문자열은 점화식이 있는 문제다. -> 점화식을 재귀로 구현하면 된다.
# 반으로 쪼개가며 왼쪽에 위치하면 반전이 없고, 오른쪽에 위치하면 반전이 존재한다.
# 비트로 표현하면 비트가 1인 것마다 반전이 생기는 것이기 때문에 개수를 세는 것으로 찾는 값이 무엇인 지 알 수 있다.

# 예시
# 길이가 8인 것부터 시작해 봅시다. 즉, 0번째 수부터 7번째 수까지를 생각해 봅시다.
# 0110 1001

# 6 >> re(5) ===> 1-re(2) >> 1- re(0) ===> 1-(1-0) =0
# 4 >> re(3) ===> 1-re(1) ===> 1-(1) =0
# 7 >> re(6) ===> re(3) >> 1-re(1) ===> (1-1)=0

# 비트가 의미하는 건 2의 i제곱을 의미하는 것이고, 1인 비트의 수를 세는 건 위의 과정을 큰 i부터 한 단계씩 내려오면서 수행한 것과 같습니다.
# 즉, 비트가 1이면 오른쪽에 있다는 뜻이고, 0이면 왼쪽에 있다는 뜻입니다.
